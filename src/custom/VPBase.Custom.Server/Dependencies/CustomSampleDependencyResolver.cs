
/*═══════════════════════════════════════════════════════════════════════════════════════════╗
║ READONLY SAMPLE: CustomSampleDependencyResolver
╟────────────────────────────────────────────────────────────────────────────────────────────╢
║ Do NOT edit this file in your custom project.
║ When starting a new custom project, copy this file and name the copy "CustomDependencyResolver".
║ Insert your custom project´s dependencies into that copy.
║ Update CustomStartupInstruction.cs so that it refers to your copy instead of this sample.
╚═══════════════════════════════════════════════════════════════════════════════════════════*/
using System.Reflection;
using VPBase.Custom.Core.CustomConfigImportExporter;
using VPBase.Custom.Core.Services.TenantMigrationServices;
using VPBase.Custom.Core.Services.VP_Template_Mvc;
using VPBase.Custom.Core.Services.VP_Template_SimpleMvcService;
using VPBase.Custom.Server.Areas.Custom.WebAppServices;
using VPBase.Custom.Server.Code.Impersonate;
using VPBase.Custom.Server.Configuration.AuthExport;
using VPBase.Shared.Core.Configuration;
using VPBase.Shared.Core.Services;
using VPBase.Shared.Server.Code.Exporting;
using VPBase.Shared.Server.Configuration;
using VPBase.Shared.Server.Dependencies;
using VPBase.Shared.Server.Services;

namespace VPBase.Custom.Server.Dependencies
{
    public class CustomSampleDependencyResolver : IDependencyResolver
    {
        #region IConfigSortable

        public string GetModuleName()
        {
            return ConfigModuleConstants.Custom;
        }

        public string GetName()
        {
            return MethodBase.GetCurrentMethod().DeclaringType.Name;
        }

        public double GetSortOrder()
        {
            return 10;       // Sortorder should be 10 - 49 in Base Custom implementations.
        }

        #endregion

        public void Register(IServiceCollection services, EnvironmentMode environmentMode)
        {
            var serviceProvider = services.BuildServiceProvider();
            var appSettings = serviceProvider.GetService<AppSettings>();

            /* VP_Template_Mvc BEGIN */

            services.AddTransient<VP_Template_MvcWebAppService>();
            services.AddTransient<VP_Template_MvcService>();
            services.AddTransient<IAnonymizingService, VP_Template_MvcService>();

            /* VP_Template_Mvc END */


            /* VP_Template_SimpleMvc BEGIN */

            services.AddTransient<VP_Template_SimpleMvcWebAppService>();
            services.AddTransient<VP_Template_SimpleMvcService>();
            services.AddTransient<IAnonymizingService, VP_Template_SimpleMvcService>();

            /* VP_Template_SimpleMvc END */

            // AuthExport RoleEntityServices
            services.AddTransient<IAuthExportRoleEntityService, AuthExportRoleEntityCustomSampleService>();

            // Example Custom Auth
            if (appSettings.AuthSettings.AuthModeType == AuthModeType.LocalCustom)
            {
                services.AddTransient<IAccountWebAppService, CustomAccountLocalWebAppService>();
            }

            services.AddTransient<IImpersonateFilter, ImpersonateCustomSampleFilter>();

            services.AddTransient<ICustomConfigImportExporter, CustomTestConfigImportExporter>();

            services.AddTransient<ITenantMigrationService, CustomSampleTenantMigrationService>();           
        }

        public DependencyType GetDependencyType()
        {
            return DependencyType.Normal;
        }
    }
}
