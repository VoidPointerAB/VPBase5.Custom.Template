
/*═══════════════════════════════════════════════════════════════════════════════════════════╗
║ READONLY SAMPLE: CustomSampleJobScheduler
╟────────────────────────────────────────────────────────────────────────────────────────────╢
║ Do NOT edit this file in your custom project.
║ When starting a new custom project, copy this file and modify your copy.
║ Update CustomStartupInstruction.cs so that it refers to your copy instead of this sample.
╚═══════════════════════════════════════════════════════════════════════════════════════════*/

using VPBase.Shared.Core.Configuration;
using VPBase.Shared.Core.Services;
using VPBase.Shared.Server.Configuration;
using VPBase.Shared.Server.Jobs;

namespace VPBase.Custom.Server.Jobs
{
    public class CustomSampleJobScheduler : IJobScheduler
    {
        public void ScheduleJobs(AppSettings appSettings, IJobManager jobManager, IAllowedTenantService allowedTenantService, IEnvironmentHandler environmentHandler)
        {
            // You should implement your own appSetting for "TaskEnabled" and "CronSchedulingExpression"
            // Since this is a sample we are borrowing the MailSettings...
            if (appSettings.MailSettings.TaskEnabled)  
            { 
                jobManager.AddRecurringJob<CustomSampleJob>(appSettings.MailSettings.CronSchedulingExpression);

                //jobManager.AddManualStartupJob<CustomSampleJob>();    // How to add a job that needs to be triggered manually using the Hangfire gui

                //jobManager.AddDelayedJob<CustomSampleJob>(TimeSpan.FromMinutes(3));    // How to add a one time job that is triggered 3 minutes from startup
            }
        }

        public void RemoveDisabledJobsFromSchedule(AppSettings appSettings, IJobManager jobManager, IAllowedTenantService allowedTenantService, IEnvironmentHandler environmentHandler)
        {
            // If you disable a job that has PREVIOUSLY BEEN ENABLED, that job will still remain in the schedule unless
            // it is explicitly removed. To make sure no disabled jobs remain in schedule to haunt you, do this:
            if (!appSettings.MailSettings.TaskEnabled)
            {
                jobManager.RemoveRecurringJobFromSchedule<CustomSampleJob>();
            }
        }
    }
}
