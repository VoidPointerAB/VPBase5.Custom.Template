/*═══════════════════════════════════════════════════════════════════════════════════════════╗
║ READONLY SAMPLE: SampleUserClaimsViewComponent
╟────────────────────────────────────────────────────────────────────────────────────────────╢
║ Do NOT edit this file in your custom project.
║ When starting a new custom project, copy this file and give it a proper name with the suffix: "...ViewComponent".
║ 
║ See this class as a "controller" for the specific view component.
║ This means you also need a view for it. See where and how the sample view is added (/Shared/Components/SampleUserClaims/Default.cshtml)
║ 
║ How do I render the view component? Add the following line: @await Component.InvokeAsync("SampleUserClaims") (see SampleIndex.cshtml)
╚═══════════════════════════════════════════════════════════════════════════════════════════*/

using Microsoft.AspNetCore.Mvc;
using VPBase.Auth.Client.Code.ApiClients;
using VPBase.Auth.Client.Code.ApiClients.Connections;
using VPBase.Auth.Client.Code.ApiClients.Rest;
using VPBase.Auth.Client.Models.Maintenance;
using VPBase.Auth.Contract.SharedInterfaces;
using VPBase.Custom.Core.Data.DataPalettes;
using VPBase.Shared.Core.SharedImplementations.AuthContract;
using VPBase.Shared.Server.Configuration;
using VPBase.Shared.Server.SharedImplementations.AuthClient;

namespace VPBase.Custom.Server.Areas.Custom.ViewComponents
{
    public class SampleMaintenanceWindowViewComponent : ViewComponent
    {
        private readonly ILoggerFactory _loggerFactory;
        private readonly IAuthContractJsonConverter _authContractJsonConverter;
        private readonly AppSettings _appSettings;

        public SampleMaintenanceWindowViewComponent(ILoggerFactory loggerFactory, IAuthContractJsonConverter authContractJsonConverter, AppSettings appSettings)
        {
            _loggerFactory = loggerFactory;
            _authContractJsonConverter = authContractJsonConverter;
            _appSettings = appSettings;
        }

        public IViewComponentResult Invoke()
        {
            if (string.IsNullOrEmpty(_appSettings.MaintenanceSettings.ServerUrl))
            {
                return View(null);
            }

            var client = new RestClientMaintenanceService(new MaintenanceSettingsConnection()
            {
                ApiUrl = _appSettings.MaintenanceSettings.ServerUrl,
            }, new AuthContractLogger(_loggerFactory), new AuthClientHelper(_authContractJsonConverter), new AuthApiHelper(_authContractJsonConverter));

            var windows = client.GetWindows(new MaintenanceWindowParam()
            {
                TenantId = CustomSampleDataPalette.TenantId,
                ApplicationIds = new List<string>() { "VP_OperatingPortal_Application_0" },
                Quantity = 5,
                SecretMaintenancePassword = _appSettings.MaintenanceSettings.SecretPassword
            });

            return View(windows);
        }
    }
}
