/*═══════════════════════════════════════════════════════════════════════════════════════════╗
║ READONLY SAMPLE: CustomSampleRoutingDefinition
╟────────────────────────────────────────────────────────────────────────────────────────────╢
║ Do NOT edit this file in your custom project.
║ When starting a new custom project, copy this file and modify your copy.
║ Update CustomStartupInstruction.cs so that it refers to your copy instead of this sample.
╚═══════════════════════════════════════════════════════════════════════════════════════════*/

using System.Collections.Generic;
using System.Reflection;
using Microsoft.AspNetCore.Builder;
using VPBase.Shared.Core.Configuration;
using VPBase.Shared.Server.Dependencies;

namespace VPBase.Custom.Server.Configuration
{
    public class CustomSampleRoutingDefinition : IRoutingDefinition
    {
        #region IConfigSortable

        public string GetModuleName()
        {
            return ConfigModuleConstants.Custom;
        }

        public string GetName()
        {
            return MethodBase.GetCurrentMethod().DeclaringType.Name;
        }

        public double GetSortOrder()
        {
            return 10;       // Sortorder should be 10 - 49 in Base Custom implementations.
        }

        #endregion

        public void Register(IApplicationBuilder app, EnvironmentMode environmentMode)
        {
            // Example, test with /Test/Home/SampleIndex -> (redirects to) /Custom/Home/SampleIndex

            app.Use(async (context, next) =>
            {
                var url = context.Request.Path.Value;

                if (url.StartsWith("/Test/"))
                {
                    context.Request.Path = url.Replace("Test", "Custom");
                }

                await next();
            });
        }

        public string StartPageUrl
        {
            get { return "~/Custom/Home/SampleIndex"; }
        }

        public List<MapMvcRouteItem> MapMvcRoutes =>

            new List<MapMvcRouteItem>()
            {
                // It's a copy from the base routing, but it will use this since it has the highest sort order.

                new MapMvcRouteItem()
                {
                    Name = "areas",
                    Template = "{area:exists}/{controller=Home}/{action=Index}/{id?}"
                },
                new MapMvcRouteItem()
                {
                    Name = "default",
                    Template = "{controller=Home}/{action=Index}/{id?}"
                }
            };

        public string ErrorPage404Url
        {
            get { return ""; }
        }

        public string ErrorPage500Url
        {
            get { return ""; }
        }

        public string ErrorPageExceptionUrl
        {
            get { return ""; }
        }
    }
}
