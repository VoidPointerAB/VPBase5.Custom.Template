/*═══════════════════════════════════════════════════════════════════════════════════════════╗
║ READONLY SAMPLE: CustomSampleAppConfigDefinition
╟────────────────────────────────────────────────────────────────────────────────────────────╢
║ Do NOT edit this file in your custom project.
║ When starting a new custom project, copy this file and name the copy "CustomAppConfigDefinition".
║ Insert your custom project´s auth dependencies into that copy.
║ Update CustomStartupInstruction.cs so that it refers to your copy instead of this sample.
╚═══════════════════════════════════════════════════════════════════════════════════════════*/
using System.Collections.Generic;
using System.Reflection;
using VPBase.Auth.Contract.ConfigEntities;
using VPBase.Auth.Contract.ConfigEntities.Applications;
using VPBase.Auth.Contract.ConfigEntities.CustomFields;
using VPBase.Auth.Contract.Definitions;
using VPBase.Auth.Contract.Definitions.AppConfigs;

namespace VPBase.Custom.Core.Definitions
{
    public class CustomSampleAppConfigDefinition : IAppConfigDefinition
    {
        public const string CustomerId = "CustomCustomerId";    // Example: Kemira, SydGront

        public const string ModuleName = "CustomSample";        // Example: KeWp, SgIntra

        #region IConfigSortable

        public string GetModuleName()
        {
            return ModuleName;
        }

        public string GetName()
        {
            return MethodBase.GetCurrentMethod().DeclaringType.Name;
        }

        public double GetSortOrder()
        {
            return 11;       // Sortorder should be 10 - 49 in Base Custom implementations.
        }

        #endregion

        #region application

        public ApplicationConfig GetApplication()
        {
            return new ApplicationConfig()
            {
                ApplicationId = ConfigIdHelper.GetId(CustomerId, ModuleName, ConfigEntityType.Application, ModuleName + "App"),
                PrefixName = ModuleName,
                Name = ModuleName + " Application",
                Scope = GlobalDefinitions.DefaultScope,
                ScopeDescription = " Your " + ModuleName.ToLower() + " information with roles, policies etc. needed for this application",
                CustomFieldEntityDefinitions = GetAllCustomFieldEntityDefinitions(),
                ApplicationClients = GetAllClients(),
                Activities = GetAllActivities(),
                ActivityIdsToRemove = GetActivityIdsToRemove(),
                Roles = GetAllRoles(),
                Policies = GetAllPolicies(),
            };
        }

        #endregion

        #region customFieldEntityDefintions

        public static List<CustomFieldEntityConfigDefinition> GetAllCustomFieldEntityDefinitions()
        {
            return new List<CustomFieldEntityConfigDefinition>()
            {
                
            };
        }

        #endregion

        #region clients

        public static ApplicationClientConfig ClientWebMvcClient = new ApplicationClientConfig()
        {
            ClientId = ConfigIdHelper.GetId(CustomerId, ModuleName, ConfigEntityType.ApplicationClient, "WebMvc"),
            ClientName = ModuleName + " Web Mvc Client",
            AllowedGrantTypes = GlobalAppDefinitions.GrantTypesImplicit,
            AllowedScopes = new List<string>() { GlobalAppDefinitions.StandardScopeOpenId, GlobalAppDefinitions.StandardScopeProfile },  // Will also automatically inherit the app scope
            ProtocolType = GlobalAppDefinitions.ProtocolOpenIdConnect,
            Secret = "webMvcClient2021!#",
            RequireConsent = false
        };

        public static ApplicationClientConfig ClientSyncApiClient = new ApplicationClientConfig()
        {
            ClientId = ConfigIdHelper.GetId(CustomerId, ModuleName, ConfigEntityType.ApplicationClient, "SyncApi"),
            ClientName = ModuleName + " Web Sync Api Client",
            AllowedGrantTypes = GlobalAppDefinitions.GrantTypesClientCredentials,
            AllowedScopes = new List<string>() { "SyncApi" },
            ProtocolType = GlobalAppDefinitions.ProtocolOpenIdConnect,
            Secret = "webAuthApiClient2021!#",
            RequireConsent = false
        };

        public static List<ApplicationClientConfig> GetAllClients()
        {
            return new List<ApplicationClientConfig>()
            {
                ClientWebMvcClient,
                ClientSyncApiClient
            };
        }

        #endregion

        #region activities

        // Check the template activities in the CustomCoreAppConfigDefinition

        // Note: No need to prefix the last part of the ActivityId (the name) in the CustomAppConfigDefinition. Example: nameOrUniqueId: "IssueWorkPermit. 
        // This since the id already contains the prefix using the CustomerId and the ModuleName combined.

        // ClaimType must be prefixed as hole string, but by using ModuleName as prefix it will be unique.

        public static List<ActivityConfig> GetAllActivities()
        {
            return new List<ActivityConfig>()
            {
                
            };
        }

        public static List<string> GetActivityIdsToRemove()
        {
            return new List<string>()
            {
                // Uncomment lines below in a real scenario to remove 
                // the export of the templates (the activities) to the external auth-service. 
                // We do not want to use templates or see in the real customer or module project!

                //CustomCoreAppConfigDefinition.Activity_VP_Template_Mvc.ActivityId,
                //CustomCoreAppConfigDefinition.Activity_VP_Template_SimpleMvc.ActivityId
            };
        }

        #endregion

        #region roles

        public const string RoleCustomSampleUserName = "Custom Sample User";     // Examples: "KeWp User", "SGIntra User"
        public static RoleConfig RoleCustomSampleUser = new RoleConfig()
        {
            RoleId = ConfigIdHelper.GetId(CustomerId, ModuleName, ConfigEntityType.Role, "CustomSampleUser"),
            Name = RoleCustomSampleUserName
        };

        public const string RoleCustomSampleApplicationAdminName = "Custom Sample Application Admin";   // Example: "KeWp Application Admin", "SGIntra Application Admin"
        public static RoleConfig RoleCustomSampleApplicationAdmin = new RoleConfig()
        {
            RoleId = ConfigIdHelper.GetId(CustomerId, ModuleName, ConfigEntityType.Role, "CustomSampleApplicationAdmin"),
            Name = RoleCustomSampleApplicationAdminName
        };

        public const string RoleCustomSampleSuperAdminName = "Custom Sample Super Admin";   // Example: "KeWp Super Admin", "SGIntra Super Admin"
        public static RoleConfig RoleCustomSampleSuperAdmin = new RoleConfig()
        {
            RoleId = ConfigIdHelper.GetId(CustomerId, ModuleName, ConfigEntityType.Role, "CustomSampleSuperAdmin"), 
            Name = RoleCustomSampleSuperAdminName
        };

        public static List<RoleConfig> GetAllRoles()
        {
            return new List<RoleConfig>()
            {
                RoleCustomSampleUser,
                RoleCustomSampleApplicationAdmin,
                RoleCustomSampleSuperAdmin
            };
        }

        #endregion

        #region policies

        // Check the template policys in the CustomCoreAppConfigDefinition

        public static List<PolicyConfig> GetAllPolicies()
        {
            return new List<PolicyConfig>()
            {
                
            };
        }

        #endregion
    }
}
