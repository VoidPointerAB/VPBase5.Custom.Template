/*═══════════════════════════════════════════════════════════════════════════════════════════╗
║ READONLY SAMPLE: CustomSampleGenericCleanupDataSetup
╟────────────────────────────────────────────────────────────────────────────────────────────╢
║ Do NOT edit this file in your custom project.
║ When starting a new custom project, copy this file and name the copy "CustomGenericCleanupDataSetup".
║ Insert your custom project´s demo data into that copy.
║ Update CustomStartupInstruction.cs so that it refers to your copy instead of this sample.
╚═══════════════════════════════════════════════════════════════════════════════════════════*/

using System.Reflection;
using System.Runtime.CompilerServices;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using VPBase.Shared.Core.Configuration;
using VPBase.Shared.Core.Data.Demo;
using VPBase.Shared.Core.Types;

namespace VPBase.Custom.Core.Data.DataImporters.DemoTest
{
    public class CustomSampleGenericCleanupDataSetup : IDemoTestDataSetup
    {
        #region IConfigSortableExtended   

        public string GetModuleName()
        {
            return ConfigModuleConstants.Custom;
        }

        public string GetName()
        {
            return MethodBase.GetCurrentMethod().DeclaringType.Name;
        }

        public double GetSortOrder()
        {
            return 10;      // Sortorder should be 10 - 49 in Base Custom implementations.
                            // IMPORTANT! This data setup needs to have a lower sort order to run before the others.
                            // To be able to cleanup before the DEMO and the TEST-setups are executed.
        }

        public ConfigStartModeType GetStartMode()
        {
            // Auto: this is DEFAULT/NORMAL behaviour and the class will be automatically executed when the job is runned
            // Manual: this means that the job can only be started with a custom startup executor (this is an ADVANCED state)
            // Inactivated: this means that the class will NEVER be runned, set class to this state when OFF-status

            return ConfigStartModeType.Auto;
        }

        public string GetDescription()
        {
            return "Custom sample GENERIC data setup clearing the VP Templates-tables";
        }

        #endregion

        public DemoTestStatusType DemoTestStatusType
        {
            get
            {
                return DemoTestStatusType.Generic;      // Generic means that it can be shared between DEMO and TEST-setups for a specific tenant. But never as a standalone job.
            }
        }

        public void InjectData(IServiceProvider serviceProvider, string tenantId)
        {
#pragma warning disable CS0219 // Variable is assigned but its value is never used
            var test = "";
#pragma warning restore CS0219 // Variable is assigned but its value is never used
        }

        public void RestoreData(IServiceProvider serviceProvider, string tenantId)
        {
            var customStorage = serviceProvider.GetService<ICustomStorage>();
            var db = ((DbContext)customStorage).Database;
            
            db.ExecuteSql(FormattableStringFactory.Create(
                $"DELETE FROM {"[Custom.Sample].VP_Template_SimpleMvcs"} WHERE TenantId='{tenantId}'"));

            db.ExecuteSql(FormattableStringFactory.Create(
                $"DELETE FROM {"[Custom.Sample].VP_Template_Mvcs"} WHERE TenantId='{tenantId}'"));
            
            InjectData(serviceProvider, tenantId);
        }
    }
}
