/*═══════════════════════════════════════════════════════════════════════════════════════════╗
║ READONLY SAMPLE: CustomSampleTestDataSetup
╟────────────────────────────────────────────────────────────────────────────────────────────╢
║ Do NOT edit this file in your custom project.
║ When starting a new custom project, copy this file and name the copy "CustomTestDataSetup".
║ Insert your custom project´s demo data into that copy.
║ Update CustomStartupInstruction.cs so that it refers to your copy instead of this sample.
╚═══════════════════════════════════════════════════════════════════════════════════════════*/

using System.Reflection;
using Microsoft.Extensions.DependencyInjection;
using VPBase.Custom.Core.Data.DataPalettes;
using VPBase.Shared.Core.Configuration;
using VPBase.Shared.Core.Data.Demo;
using VPBase.Shared.Core.Helpers.DateTimeProvider;
using VPBase.Shared.Core.Helpers.Testing;
using VPBase.Shared.Core.Types;

namespace VPBase.Custom.Core.Data.DataImporters.DemoTest
{
    /// <summary>
    /// An example of a setup with TESTABLE type that can be used to test with LARGER data sets and then used 
    /// for more INTERNAL use to see that lists and views can handle data. 
    /// </summary>
    public class CustomSampleTestDataSetup : IDemoTestDataSetup
    {
        #region IConfigSortable

        // Properties below might added in the appsettings.json in the Custom-section to test with different amount of max items
        private const int NumOf_VP_Template_SimpleMvc_MaxItems = 50;      
        private const int NumOf_VP_Template_Mvc_MaxItems = 50;

        public string GetModuleName()
        {
            return ConfigModuleConstants.Custom;
        }

        public string GetName()
        {
            return MethodBase.GetCurrentMethod().DeclaringType.Name;
        }

        public double GetSortOrder()
        {
            return 11;      // Sortorder should be 10 - 49 in Base Custom implementations.
                            // We removed the cleanup code in this example, and placed it in a Generic Cleanup Data Setup.
                            // Here this class must have a higher sort order than the generic class.
        }

        public ConfigStartModeType GetStartMode()
        {
            // Auto: this is DEFAULT/NORMAL behaviour and the class will be automatically executed when the job is runned
            // Manual: this means that the job can only be started with a custom startup executor (this is an ADVANCED state)
            // Inactivated: this means that the class will NEVER be runned, set class to this state when OFF-status

            return ConfigStartModeType.Auto;
        }

        public string GetDescription()
        {
            return "Custom sample TEST data setup using the VP Templates";
        }

        #endregion

        public DemoTestStatusType DemoTestStatusType
        {
            get
            {
                return DemoTestStatusType.Testable;
            }
        }

        public void InjectData(IServiceProvider serviceProvider, string tenantId)
        {
            var customStorage = serviceProvider.GetService<ICustomStorage>();
            var dateTimeProvider = serviceProvider.GetService<IDateTimeProvider>();

            CustomSampleDataPalette.ReferenceDate = dateTimeProvider.Now();

            if (!customStorage.VP_Template_SimpleMvcs.Any(x => x.TenantId == tenantId))
            {
                for ( var i = 0; i < NumOf_VP_Template_SimpleMvc_MaxItems; ++i)
                {
                    // Note: Use GetRandomText() if NO separators are used ';'

                    var randomAnimalsTextParts = CustomSampleRandomText.AnimalsWithDescription.GetRandomTextParts();
                    var name = randomAnimalsTextParts.ElementAt(0);
                    var description = randomAnimalsTextParts.ElementAt(1);

                    customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_SimpleMvc(tenantId: tenantId, name: name, description: description));
                }
                customStorage.SaveChanges();
            }

            if (!customStorage.VP_Template_Mvcs.Any(x => x.TenantId == tenantId))
            {
                // Example #1 - Using CustomSampleRandomText

                //for (var i = 0; i < NumOf_VP_Template_Mvc_MaxItems; ++i)
                //{
                //    var randomFruitsTextParts = CustomSampleRandomText.FruitsWithDescription.GetRandomTextParts();
                //    var name = randomFruitsTextParts.ElementAt(0);
                //    var description = randomFruitsTextParts.ElementAt(1);

                //    customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_Mvc(tenantId: tenantId, name: name, description: description));
                //}

                // Example #2 - Using SharedBaseRandomText (most 100 common names for men and women with lastnames in sweden)

                var firstNames = new List<string>();
                firstNames.AddRange(SharedBaseRandomText.FirstNames_Women_Swedish.GetTexts());
                firstNames.AddRange(SharedBaseRandomText.FirstNames_Men_Swedish.GetTexts());
                var firstNameRandomizer = new DataPaletteTextRandomizer(firstNames);

                for (int i = 0; i < NumOf_VP_Template_Mvc_MaxItems; i++)
                {
                    var firstName = firstNameRandomizer.GetRandomText();
                    var lastName = SharedBaseRandomText.LastNames_Swedish.GetRandomText();

                    customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_Mvc(tenantId: tenantId, name: firstName, description: $"{firstName} {lastName} - GDPR ok"));
                }


                customStorage.SaveChanges();
            }
        }

        public void RestoreData(IServiceProvider serviceProvider, string tenantId)
        {
            // If using a GENERIC Data Setup as here with restore/cleanup code and
            // with a lower sort order. It handles instead the cleanup!
            // The code below is unneccessary. 

            //var customStorage = serviceProvider.GetService<ICustomStorage>();
            //var db = ((DbContext)customStorage).Database;

            //db.ExecuteSql(FormattableStringFactory.Create(
            //    $"DELETE FROM {"[Custom.Sample].VP_Template_SimpleMvcs"} WHERE TenantId='{tenantId}'"));

            //db.ExecuteSql(FormattableStringFactory.Create(
            //    $"DELETE FROM {"[Custom.Sample].VP_Template_Mvcs"} WHERE TenantId='{tenantId}'"));

            InjectData(serviceProvider, tenantId);
        }
    }
}
