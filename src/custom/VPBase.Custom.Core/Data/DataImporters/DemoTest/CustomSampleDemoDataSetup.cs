/*═══════════════════════════════════════════════════════════════════════════════════════════╗
║ READONLY SAMPLE: CustomSampleDemoDataSetup
╟────────────────────────────────────────────────────────────────────────────────────────────╢
║ Do NOT edit this file in your custom project.
║ When starting a new custom project, copy this file and name the copy "CustomDemoDataSetup".
║ Insert your custom project´s demo data into that copy.
║ Update CustomStartupInstruction.cs so that it refers to your copy instead of this sample.
╚═══════════════════════════════════════════════════════════════════════════════════════════*/

using System.Reflection;
using Microsoft.Extensions.DependencyInjection;
using VPBase.Custom.Core.Data.DataPalettes;
using VPBase.Custom.Core.Data.Entities;
using VPBase.Shared.Core.Configuration;
using VPBase.Shared.Core.Data.Demo;
using VPBase.Shared.Core.Helpers.DateTimeProvider;
using VPBase.Shared.Core.Types;

namespace VPBase.Custom.Core.Data.DataImporters.DemoTest
{
    public class CustomSampleDemoDataSetup : IDemoTestDataSetup
    {
        #region IConfigSortableExtended

        public string GetModuleName()
        {
            return ConfigModuleConstants.Custom;
        }

        public string GetName()
        {
            return MethodBase.GetCurrentMethod().DeclaringType.Name;
        }

        public double GetSortOrder()
        {
            return 11;      // Sortorder should be 10 - 49 in Base Custom implementations.
                            // Note: We removed the cleanup code in this example, and placed it in a Generic Cleanup Data Setup.
                            // Here this class must have a higher sort order than the generic class.
        }

        public ConfigStartModeType GetStartMode()
        {
            // Auto: this is DEFAULT/NORMAL behaviour and the class will be automatically executed when the job is runned
            // Manual: this means that the job can only be started with a custom startup executor (this is an ADVANCED state)
            // Inactivated: this means that the class will NEVER be runned, set class to this state when OFF-status

            return ConfigStartModeType.Auto;                                                    
        }

        public string GetDescription()
        {
            return "Custom sample DEMO data setup using the VP Templates";
        }

        #endregion

        public DemoTestStatusType DemoTestStatusType
        {
            get
            {
                return DemoTestStatusType.Demonstrable;
            }
        }

        public void InjectData(IServiceProvider serviceProvider, string tenantId)
        {
            var customStorage = serviceProvider.GetService<ICustomStorage>();
            var dateTimeProvider = serviceProvider.GetService<IDateTimeProvider>();

            var now = dateTimeProvider.Now();
            CustomSampleDataPalette.ReferenceDate = now;

            if (!customStorage.VP_Template_SimpleMvcs.Any(x => x.TenantId == tenantId))
            {
                customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_SimpleMvc(tenantId: tenantId, name: "Stekel", description: "En salt insekt", status: VP_Template_SimpleMvcStatus.New, createdUtc: now));
                customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_SimpleMvc(tenantId: tenantId, name: "Bönsyrsa", description: "En annan salt insekt", status: VP_Template_SimpleMvcStatus.New, createdUtc: now));
                customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_SimpleMvc(tenantId: tenantId, name: "Mops", description: "En hund", status: VP_Template_SimpleMvcStatus.InProgress, createdUtc: now.AddDays(-1)));
                customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_SimpleMvc(tenantId: tenantId, name: "Sphynx", description: "En katt", status: VP_Template_SimpleMvcStatus.InProgress, createdUtc: now.AddDays(2)));
                customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_SimpleMvc(tenantId: tenantId, name: "Räka", description: "Ett litet skaldjur", status: VP_Template_SimpleMvcStatus.Done, createdUtc: now.AddDays(-5)));
                customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_SimpleMvc(tenantId: tenantId, name: "Elefant", description: "Ett stort djur", status: VP_Template_SimpleMvcStatus.Done, createdUtc: now.AddDays(6)));
                customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_SimpleMvc(tenantId: tenantId, name: "Tarantel", description: "Ett räligt djur", status: VP_Template_SimpleMvcStatus.Done, createdUtc: now, isActive: false));

                customStorage.SaveChanges();
            }

            if (!customStorage.VP_Template_Mvcs.Any(x => x.TenantId == tenantId))
            {
                customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_Mvc(tenantId: tenantId, name: "Äpple", description: "En frukt som växer på träd"));
                customStorage.Add(CustomSampleDataPalette.Entities.VP_Template_Mvc(tenantId: tenantId, name: "Banan", description: "En gul frukt"));

                customStorage.SaveChanges();
            }
        }

        public void RestoreData(IServiceProvider serviceProvider, string tenantId)
        {
            // If using a GENERIC Data Setup as here with restore/cleanup code and
            // with a lower sort order. It handles instead the cleanup!
            // The code below is unneccessary. 

            //var customStorage = serviceProvider.GetService<ICustomStorage>();
            //var db = ((DbContext)customStorage).Database;

            //db.ExecuteSql(FormattableStringFactory.Create(
            //    $"DELETE FROM {"[Custom.Sample].VP_Template_SimpleMvcs"} WHERE TenantId='{tenantId}'"));

            //db.ExecuteSql(FormattableStringFactory.Create(
            //    $"DELETE FROM {"[Custom.Sample].VP_Template_Mvcs"} WHERE TenantId='{tenantId}'"));

            InjectData(serviceProvider, tenantId);
        }
    }
}
